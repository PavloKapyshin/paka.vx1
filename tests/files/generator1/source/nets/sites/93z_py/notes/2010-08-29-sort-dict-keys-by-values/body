<%namespace file="note_helpers.mako" name="note"/>

<p>Can we actually sort a Python’s dict? No, but we can sort a list that \
contains its keys and values.</p>

<p>A simplest way to do this is to use a <code>sort</code> method:</p>

<%note:code><%text>
>>> d = {'c': 100, 'a': 0, 'b': 10}
>>> items = d.items()
>>> items.sort(lambda x, y: cmp(x[1], y[1]))
>>> items
[('a', 0), ('b', 10), ('c', 100)]
</%text></%note:code>

<p>We can use a <code>key</code> argument to make function call a bit shorter:</p>

<%note:code><%text>
>>> items = d.items()
>>> items.sort(key=lambda i: i[1])
>>> items
[('a', 0), ('b', 10), ('c', 100)]
</%text></%note:code>

<p>Also we can use a <a href="http://docs.python.org/2.7/library/functions.html#\
sorted"><code>sorted</code></a> built-in:</p>
<%note:code><%text>
>>> sorted(d.iteritems(), key=lambda i: i[1])
[('a', 0), ('b', 10), ('c', 100)]
</%text></%note:code>

<p>But what if we care about speed? <a href="http://writeonly.wordpress.com/2008/0\
8/30/sorting-dictionaries-by-value-in-python-improved/">According to Gregg Lind</a>, \
the fastest solution uses <a href="http://docs.python.org/2.7/library/operator.html#\
operator.itemgetter"><code>operator.itemgetter</code></a> (that is suggested in <a href="http://www.pyt\
hon.org/dev/peps/pep-0265/">PEP 265</a> named “Sorting Dictionaries by Value”) instead \
of lambda function:</p>

<%note:code><%text>
>>> from operator import itemgetter
>>> sorted(d.iteritems(), key=itemgetter(1))
[('a', 0), ('b', 10), ('c', 100)]
</%text></%note:code>

<p>This version is 10x faster than first three.</p>
